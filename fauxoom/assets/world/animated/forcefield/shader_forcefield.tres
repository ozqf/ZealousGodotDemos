[gd_resource type="VisualShader" load_steps=12 format=2]

[ext_resource path="res://assets/world/animated/forcefield/forcefield_blue.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, -1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=2]

[sub_resource type="VisualShaderNodeTexture" id=3]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=6]

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 8.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=8]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, -1 ) ]

[sub_resource type="VisualShaderNodeVectorOp" id=10]

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_7;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Input:3
	float n_out3p0 = TIME;

// ScalarOp:6
	float n_in6p1 = 8.00000;
	float n_out6p0 = n_out3p0 / n_in6p1;

// VectorOp:5
	vec3 n_out5p0 = n_out4p0 + vec3(n_out6p0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out5p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarOp:10
	float n_in10p1 = -1.00000;
	float n_out10p0 = n_out6p0 * n_in10p1;

// VectorOp:8
	vec3 n_out8p0 = n_out4p0 + vec3(n_out10p0);

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out8p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// VectorOp:9
	vec3 n_out9p0 = n_out2p0 + n_out7p0;

// ScalarOp:11
	float n_out11p0 = n_out2p1 + n_out7p1;

// Output:0
	ALBEDO = n_out9p0;
	ALPHA = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -727.2, 114.85 )
nodes/fragment/0/position = Vector2( 820, 100 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( 200, -100 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -520, 220 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -380, 120 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -100, 80 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( -340, 220 )
nodes/fragment/7/node = SubResource( 8 )
nodes/fragment/7/position = Vector2( 280, 300 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( 80, 320 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( 620, 40 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -151, 366 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 560, 260 )
nodes/fragment/connections = PoolIntArray( 5, 0, 2, 0, 3, 0, 6, 0, 6, 0, 5, 1, 8, 0, 7, 0, 2, 0, 9, 0, 7, 0, 9, 1, 9, 0, 0, 0, 6, 0, 10, 0, 10, 0, 8, 1, 11, 0, 0, 1, 2, 1, 11, 0, 7, 1, 11, 1, 4, 0, 8, 0, 4, 0, 5, 0 )
