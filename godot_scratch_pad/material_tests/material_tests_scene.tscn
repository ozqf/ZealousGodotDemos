[gd_scene load_steps=16 format=2]

[ext_resource path="res://material_tests/visual_editor_triplanar/red_cell.png" type="Texture" id=1]

[sub_resource type="CubeMesh" id=17]
size = Vector3( 1, 1, 1 )

[sub_resource type="VisualShaderNodeTextureUniformTriplanar" id=18]
uniform_name = "TextureUniformTriplanar"

[sub_resource type="VisualShader" id=19]
code = "shader_type spatial;
render_mode specular_schlick_ggx, world_vertex_coords;

uniform sampler2D TextureUniformTriplanar;


// TRIPLANAR FUNCTION GLOBAL CODE
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// Output:0

	// TRIPLANAR FUNCTION VERTEX CODE
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

void fragment() {
// TextureUniformTriplanar:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = triplanar_texture( TextureUniformTriplanar, triplanar_power_normal, triplanar_pos );
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -356, 119 )
flags/world_vertex_coords = true
nodes/fragment/0/position = Vector2( 480, 140 )
nodes/fragment/2/node = SubResource( 18 )
nodes/fragment/2/position = Vector2( 180, 140 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 19 )
shader_param/triplanar_scale = Vector3( 1, 1, 1 )
shader_param/triplanar_offset = null
shader_param/triplanar_sharpness = 0.5
shader_param/TextureUniformTriplanar = ExtResource( 1 )

[sub_resource type="CubeMesh" id=21]
size = Vector3( 1, 1, 1 )

[sub_resource type="SpatialMaterial" id=22]
flags_transparent = true
flags_world_triplanar = true
albedo_texture = ExtResource( 1 )
uv1_triplanar = true

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id=16]
size = Vector2( 785, 376 )
expression = "vec3 triplanar_offset = vec3(0, 0, 0);
vec3 triplanar_scale = vec3(1, 1, 1);
vec3 triplanar_power_normal = pow(abs(NORMAL), vec3(0.5));

triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
//if (triplanar_power_normal.z < 0.0) { triplanar_power_normal.x *= -1.0; }
vec3 triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
vec2 samp = vec2(0.0);
samp += triplanar_pos.xy * triplanar_power_normal.z;
samp += triplanar_pos.xz * triplanar_power_normal.y;
samp += triplanar_pos.zy * triplanar_power_normal.x;
samp.y *= -1.0;
//samp.x *= -1.0;
//samp.x = abs(samp.x);
world_uv = vec3(samp, 0.0);
"

[sub_resource type="VisualShader" id=13]
code = "shader_type spatial;
render_mode specular_schlick_ggx, world_vertex_coords;

uniform sampler2D tex_frg_2;



void vertex() {
// Expression:3
	vec3 n_out3p0;
	n_out3p0 = vec3(0.0, 0.0, 0.0);
	{
		vec3 triplanar_offset = vec3(0, 0, 0);
		vec3 triplanar_scale = vec3(1, 1, 1);
		vec3 triplanar_power_normal = pow(abs(NORMAL), vec3(0.5));
		
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		//if (triplanar_power_normal.z < 0.0) { triplanar_power_normal.x *= -1.0; }
		vec3 triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		vec2 samp = vec2(0.0);
		samp += triplanar_pos.xy * triplanar_power_normal.z;
		samp += triplanar_pos.xz * triplanar_power_normal.y;
		samp += triplanar_pos.zy * triplanar_power_normal.x;
		samp.y *= -1.0;
		//samp.x *= -1.0;
		//samp.x = abs(samp.x);
		n_out3p0 = vec3(samp, 0.0);
		
	}

// Output:0
	UV = n_out3p0.xy;

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out3p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -389.413, -219.853 )
flags/world_vertex_coords = true
nodes/vertex/0/position = Vector2( 600, -160 )
nodes/vertex/2/node = SubResource( 8 )
nodes/vertex/2/position = Vector2( 400, -200 )
nodes/vertex/3/node = SubResource( 16 )
nodes/vertex/3/position = Vector2( -400, -180 )
nodes/vertex/3/size = Vector2( 785, 376 )
nodes/vertex/3/input_ports = ""
nodes/vertex/3/output_ports = "0,1,world_uv;"
nodes/vertex/3/expression = "vec3 triplanar_offset = vec3(0, 0, 0);
vec3 triplanar_scale = vec3(1, 1, 1);
vec3 triplanar_power_normal = pow(abs(NORMAL), vec3(0.5));

triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
//if (triplanar_power_normal.z < 0.0) { triplanar_power_normal.x *= -1.0; }
vec3 triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
vec2 samp = vec2(0.0);
samp += triplanar_pos.xy * triplanar_power_normal.z;
samp += triplanar_pos.xz * triplanar_power_normal.y;
samp += triplanar_pos.zy * triplanar_power_normal.x;
samp.y *= -1.0;
//samp.x *= -1.0;
//samp.x = abs(samp.x);
world_uv = vec3(samp, 0.0);
"
nodes/vertex/connections = PoolIntArray( 3, 0, 0, 4 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( 120, 200 )
nodes/fragment/3/node = SubResource( 15 )
nodes/fragment/3/position = Vector2( -143, 245 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 2, 0, 0, 0, 2, 1, 0, 1 )

[sub_resource type="ShaderMaterial" id=23]
shader = SubResource( 13 )

[sub_resource type="PlaneMesh" id=24]

[sub_resource type="SpatialMaterial" id=25]
albedo_texture = ExtResource( 1 )

[node name="material_tests_scene" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 4, 0, 0, 0, 3, 0, 0, 0, 15, -0.0377979, 0.0434022, -0.00299263 )
mesh = SubResource( 17 )
material/0 = SubResource( 20 )

[node name="spatial_material_default" type="MeshInstance" parent="."]
transform = Transform( 4, 0, 0, 0, 3, 0, 0, 0, 15, 8.49302, 0, 0 )
mesh = SubResource( 21 )
material/0 = SubResource( 22 )

[node name="spatial_material_default2" type="MeshInstance" parent="."]
transform = Transform( 10, 0, 0, 0, 8, 0, 0, 0, 14, -10, 0, 0 )
mesh = SubResource( 21 )
material/0 = SubResource( 23 )

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 7.99919, 0 )
mesh = SubResource( 24 )
material/0 = SubResource( 25 )
